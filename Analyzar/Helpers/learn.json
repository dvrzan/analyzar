[
  {
    "title": "Introduction to the learning series",
    "category": "Basics",
    "description": "Machine Learning is like weed in high school. Everyone is talking about it, a few know what to do, and only your teacher is doing it. If you ever tried to read articles about machine learning on the Internet, most likely you stumbled upon two types of them: thick academic trilogies filled with theorems (I couldn\u2019t even get through half of one) or fishy fairytales about <em>artificial intelligence<\/em>, <em>data-science magic<\/em>, and <em>jobs of the future<\/em>.\r\n\r\nI decided to write something I\u2019ve been wishing existed for a long time. A simple introduction for those who always wanted to understand machine learning. Only real-world problems, practical solutions, simple language, and no high-level theorems. One and for everyone. \r\n\r\nLet's roll."
  },
  {
    "title": "Why do we want machines to learn?",
    "category": "Basics",
    "description": "Meet Billy. Billy wants to buy a car. He tries to calculate how much he needs to save monthly for that. He went over dozens of ads on the Internet and learned that new cars are around $20.000, used year-old ones are $19.000, 2-year old are $18.000 and so on.\r\n\r\nBilly, our brilliant analytic, starts seeing a pattern: <em>\u201Dso, the car price depends on its age and drops $1.000 every year, but won't get lower than $10.000.\u201D<\/em>\r\n\r\nIn machine learning terms, Billy invented <strong>regression<\/strong> - he predicted a value (price) based on known historical data. People do it all the time, when trying to estimate a reasonable cost for a used iPhone on eBay or figure out how many ribs to buy for a BBQ party. 200 grams per person? 500?\r\n\r\nYeah, it would be nice to have a simple formula for every problem in the world. Especially, for a BBQ party. Unfortunately, it's impossible.\r\n\r\nLet's get back to cars. The problem is, they have different manufacturing dates, dozens of options, technical condition, seasonal demand spikes, and god only knows how many more hidden factors. An average Billy can't keep all that data in his head while calculating the price. Me too.\r\n\r\nPeople are lazy - we need robots to do the math for them. So, let's go the computational way here. Let's provide the machine some data and ask it to find all hidden patterns related to price.\r\n\r\nAaaand it works. The most exciting thing is that the machine copes with this task much better than a real person does when carefully analyzing all the dependencies in their mind.\r\n\r\nThat was the birth of machine learning."
  },
  {
    "title": "Three components of machine learning",
    "category": "Basics",
    "description": "Without mentioning the AI, the only goal of machine learning is to predict results based on incoming data. That's it. All ML tasks can be represented this way, or it's not an ML problem from the beginning.\r\n\r\nThe greater variety in the samples you have, the easier it is to find relevant patterns and predict the result. Therefore, we need three components to teach the machine:\r\n\r\n<strong>Data<\/strong>\r\nWant to detect spam? Get samples of spam messages. Want to forecast stocks? Find the price history. Want to find out user preferences? Parse their activities on Facebook (no, Mark, stop collecting it, enough!). The more diverse the data, the better the result. Tens of thousands of rows is the bare minimum for the desperate ones.\r\n\r\nThere are two main ways to get the data - manual and automatic. \r\nManually collected data contains far fewer errors but takes more time to collect - that makes it more expensive in general.\r\nAutomatic approach is cheaper - you're gathering everything you can find and hope for the best.\r\n\r\nSome smart ones like Google use their own customers to label data for them for free. Remember ReCaptcha which forces you to \"Select all street signs\"? That's exactly what they're doing. Free labour! Nice. In their place, I'd start to show captcha more and more. Oh, wait...\r\n\r\nIt's extremely tough to collect a good collection of data (usually called a dataset). They are so important that companies may even reveal their algorithms, but rarely datasets.\r\n\r\n<strong>Features<\/strong>\r\nAlso known as parameters or variables. Those could be car mileage, user's gender, stock price, word frequency in the text. In other words, these are the factors for a machine to look at.\r\nWhen data is stored in tables it's simple \u2014 features are column names. But what are they if you have 100 GB of cat pics? We cannot consider each pixel as a feature. That's why selecting the right features usually takes way longer than all the other ML parts. That's also the main source of errors. Meatbags are always subjective. They choose only features they like or find \"more important\". Please, avoid being human.\r\n\r\n<strong>Algorithms<\/strong>\r\nMost obvious part. Any problem can be solved differently. The method you choose affects the precision, performance, and size of the final model. There is one important nuance though: if the data is bad, even the best algorithm won't help.\r\n\r\nSometimes it's referred as \"garbage in - garbage out\". So don't pay too much attention to the percentage of accuracy, try to acquire more data first."
  },
  {
    "title": "Learning vs Intelligence",
    "category": "Basics",
    "description": "Once I saw an article titled <em>\u201DWill neural networks replace machine learning?\u201D<\/em> on some hipster media website. These media guys always call any lousy linear regression at least artificial intelligence, almost SkyNet.\r\n\r\n<strong>Artificial intelligence<\/strong> is the name of a whole knowledge field, similar to biology or chemistry.\r\n\r\n<strong>Machine Learning<\/strong> is a part of artificial intelligence. An important part, but not the only one.\r\n\r\n<strong>Neural Networks<\/strong> are one of machine learning types. A popular one, but there are other good guys in the class.\r\n\r\n<strong>Deep Learning<\/strong> is a modern method of building, training, and using neural networks. Basically, it's a new architecture. Nowadays in practice, no one separates deep learning from the \"ordinary networks\". We even use the same libraries for them. To not look like a dumbass, it's better to just name the type of network and avoid buzzwords.\r\n\r\nThe general rule is to compare things on the same level. That's why the phrase <em>\u201Dwill neural nets replace machine learning\u201D<\/em> sounds like <em>\u201Dwill the wheels replace cars\u201D<\/em>. Dear media, it's compromising your reputation a lot.\r\n\r\n<strong>Machine CAN<\/strong>\r\n<li>\u27A4 Forecast<\/li>\r\n<li>\u27A4 Memorize<\/li>\r\n<li>\u27A4 Reproduce<\/li>\r\n<li>\u27A4 Choose best item<\/li>\r\n\r\n<strong>Machine CANNOT<\/strong>\r\n<li>\u27A4 Create something new<\/li>\r\n<li>\u27A4 Get smart really fast<\/li>\r\n<li>\u27A4 Go beyond their task<\/li>\r\n<li>\u27A4 Kill all humans<\/li>\r\n\r\nAlways important to remember - there is never a sole way to solve a problem in the machine learning world. There are always several algorithms that fit, and you have to choose which one fits better. Everything can be solved with a neural network, of course, but who will pay for all these GeForces?\r\n\r\nLet's start with a basic overview. \r\n\r\nNowadays there are four main directions in machine learning:\r\n<li>\u27A4 Classical Learning<\/li>\r\n<li>\u27A4 Reinforcement Learning<\/li>\r\n<li>\u27A4 Ensemble Methods<\/li>\r\n<li>\u27A4 Neural Networks and Deep Learning<\/li>"
  },
  {
    "title": "Classical Machine Learning",
    "category": "Part 1",
    "description": "The first methods came from pure statistics in the '50s. They solved formal math tasks - searching for patterns in numbers, evaluating the proximity of data points, and calculating vectors' directions.\r\n\r\nNowadays, half of the Internet is working on these algorithms. When you see a list of articles to \"read next\" or your bank blocks your card at random gas station in the middle of nowhere, most likely it's the work of one of those little guys.\r\n\r\nBig tech companies are huge fans of neural networks. Obviously. For them, 2% accuracy is an additional 2 billion in revenue. But when you are small, it doesn't make sense. I heard stories of the teams spending a year on a new recommendation algorithm for their e-commerce website, before discovering that 99% of traffic came from search engines. Their algorithms were useless. Most users didn't even open the main page.\r\n\r\nDespite the popularity, classical approaches are so natural that you could easily explain them to a toddler. They are like basic arithmetic - we use it every day, without even thinking."
  },
  {
    "title": "Supervised Learning | Introduction",
    "category": "Part 1",
    "description": "Classical machine learning is often divided into two categories - <strong>Supervised<\/strong> and <strong>Unsupervised Learning<\/strong>.\r\n\r\nIn the first case, the machine has a \"supervisor\" or a \"teacher\" who gives the machine all the answers, like whether it's a cat in the picture or a dog. The teacher has already divided (labeled) the data into cats and dogs, and the machine is using these examples to learn. One by one. Dog by cat.\r\n\r\nUnsupervised learning means the machine is left on its own with a pile of animal photos and a task to find out who's who. Data is not labeled, there's no teacher, the machine is trying to find any patterns on its own. We'll talk about these methods later.\r\n\r\nClearly, the machine will learn faster with a teacher, so it's more commonly used in real-life tasks. There are two types of such tasks: <strong>classification<\/strong> - an object's category prediction, and <strong>regression<\/strong> - prediction of a specific point on a numeric axis."
  },
  {
    "title": "Supervised Learning | Classification",
    "category": "Part 1",
    "description": "<em><subLabel>\u201DSplits objects based at one of the attributes known beforehand. Separate socks based on color, documents based on language, music by genre\u2026\u201D<\/subLabel><\/em>\r\n\r\n<subLabel>\uD83C\uDF4E \uD83C\uDF4E  \u23B8 \uD83C\uDF50 \uD83C\uDF50<\/subLabel>\r\n\r\nToday used for:\r\n<li>\u27A4 Spam filtering<\/li>\r\n<li>\u27A4 Language detection<\/li>\r\n<li>\u27A4 A search of similar documents<\/li>\r\n<li>\u27A4 Sentiment analysis<\/li>\r\n<li>\u27A4 Recognition of handwritten characters and numbers<\/li>\r\n<li>\u27A4 Fraud detection<\/li>\r\n\r\nPopular algorithms: <underline>Naive Bayes<\/underline>, <underline>Decision Tree<\/underline>, <underline>Logistic Regression<\/underline>, <underline>K-Nearest Neighbours<\/underline>, <underline>Support Vector Machine<\/underline>\r\n\r\nMachine learning is about classifying things, mostly. The machine here is like a baby learning to sort toys: here's a robot, here's a car, here's a robo-car... Oh, wait. Error! Error!\r\n\r\nIn classification, you always need a teacher. The data should be labeled with features so the machine could assign the classes based on them. Everything could be classified - users based on interests (as algorithmic feeds do), articles based on language and topic (that's important for search engines), music based on genre (Spotify playlists), and even your emails.\r\n\r\nIn spam filtering the <underline>Naive Bayes<\/underline> algorithm was widely used. The machine counts the number of \u201Cviagra\u201D mentions in spam and normal mail, then it multiplies both probabilities using the Bayes equation, sums the results and yay, we have Machine Learning.\r\n\r\nLater, spammers learned how to deal with Bayesian filters by adding lots of \"good\" words at the end of the email. Ironically, the method was called Bayesian poisoning. Naive Bayes went down in history as the most elegant and first practically useful one, but now other algorithms are used for spam filtering.\r\n\r\nHere's another practical example of classification. Let's say you need some money on credit. How will the bank know if you'll pay it back or not? There's no way to know for sure. But the bank has lots of profiles of people who took money before. They have data about age, education, occupation and salary and - most importantly - the fact of paying the money back. Or not.\r\n\r\nUsing this data, we can teach the machine to find the patterns and get the answer. There's no issue with getting an answer. The issue is that the bank can't blindly trust the machine answer. What if there's a system failure, hacker attack or a <em>quick fix from a drunk senior<\/em>.\r\n\r\nTo deal with it, we have <underline>Decision Trees<\/underline>. All the data automatically divided to yes\/no questions. They could sound a bit weird from a human perspective, e.g., <em>whether the creditor earns more than $128.12?<\/em>Though, the machine comes up with such questions to split the data best at each step.\r\n\r\nThat's how a tree is made. The higher the branch - the broader the question. Any analyst can take it and explain afterward. He may not understand it, but explain easily! (typical analyst)\r\nDecision trees are widely used in high responsibility spheres: diagnostics, medicine, and finances.\r\n\r\nPure decision trees are rarely used today. However, they often set the basis for large systems, and their ensembles even work better than neural networks. We'll talk about that later.\r\n\r\n<underline>Support Vector Machines (SVM)<\/underline> is rightfully the most popular method of classical classification. It was used to classify everything in existence: plants by appearance in photos, documents by categories, etc.\r\n\r\nThere's one very useful side of the classification - anomaly detection. When a feature does not fit any of the classes, we highlight it. Now that's used in medicine - on MRIs, computers highlight all the suspicious areas or deviations of the test. Stock markets use it to detect abnormal behaviour of traders to find the insiders. When teaching the computer the right things, we automatically teach it what things are wrong.\r\n\r\nToday, neural networks are more frequently used for classification. Well, that's what they were created for.\r\n\r\n<strong>The rule of thumb is the more complex the data, the more complex the algorithm.<\/strong> For text, numbers, and tables, I'd choose the classical approach. The models are smaller there, they learn faster and work more clearly. For pictures, video and all other complicated big data things, I'd definitely look at neural networks.\r\n\r\nJust five years ago you could find a face classifier built on SVM. Today it's easier to choose from hundreds of pre-trained networks. Nothing has changed for spam filters, though. They are still written with SVM. And there's no good reason to switch from it anywhere."
  },
  {
    "title": "Supervised Learning | Regression",
    "category": "Part 1",
    "description": "<em><subLabel>\u201DDraw a line through these dots. Yep, that's the machine learning.\u201D<\/subLabel><\/em>\r\n\r\n<subLabel>\t\u2022  \u2022\u2022   \u2022\r\n\t\t\t\u2022  \u2022   \u2022\u2022\r\n\t\t\t\t\u2022\u2022  \u2022 \u2022\r\n\t\t\t\u2022  \t\t\u2022    \u2022<\/subLabel>\r\n\r\nToday this is used for:\r\n<li>\u27A4 Stock price forecasts<\/li>\r\n<li>\u27A4 Demand and sales volume analysis<\/li>\r\n<li>\u27A4 Medical diagnosis<\/li>\r\n<li>\u27A4 Any number-time correlations<\/li>\r\n\r\nPopular algorithms are <underline>Linear<\/underline> and <underline>Polynomial<\/underline> regressions.\r\n\r\nRegression is basically classification where we forecast a number instead of category. Examples are car price by its mileage, traffic by time of the day, demand volume by growth of the company etc. Regression is perfect when something depends on time.\r\n\r\nEveryone who works with finance and analysis loves regression. It's even built-in to Excel. And it's super smooth inside - the machine simply tries to draw a line that indicates average correlation. Though, unlike a person with a pen and a whiteboard, machine does so with mathematical accuracy, calculating the average interval to every dot.\r\n\r\nWhen the line is straight - it's a linear regression, when it's curved \u2013 polynomial. These are two major types of regression. The other ones are more exotic. Logistic regression is a black sheep in the flock. Don't let it trick you, as it's a classification method, not regression.\r\n\r\nIt's okay to mess with regression and classification, though. Many classifiers turn into regression after some tuning. We can not only define the class of the object but memorize how close it is. Here comes a regression."
  },
  {
    "title": "Unsupervised Learning | Introduction",
    "category": "Part 1",
    "description": "Unsupervised was invented a bit later, in the '90s. It is used less often, but sometimes we simply have no choice.\r\n\r\nLabeled data is luxury. But what if I want to create, let's say, a bus classifier? Should I manually take photos of million buses on the streets and label each of them? No way, that will take a lifetime, and I still have so many games not played on my Steam account.\r\n\r\nThere's a little hope for capitalism in this case. Thanks to social stratification, we have millions of cheap workers and services who are ready to complete your task for $0.05. And that's how things usually get done here.\r\n\r\nOr you can try to use unsupervised learning. But I can't remember any good practical application for it, though. It's usually useful for exploratory data analysis but not as the main algorithm. Specially trained meatbag with Oxford degree feeds the machine with a ton of garbage and watches it. Are there any clusters? No. Any visible relations? No. Well, continue then. You wanted to work in data science, right?"
  },
  {
    "title": "Unsupervised Learning | Clustering",
    "category": "Part 1",
    "description": "<em><subLabel>\u201DDivides objects based on unknown features. Machine chooses the best way.\u201D<\/subLabel><\/em>\r\n\r\nNowadays used:\r\n<li>\u27A4 For market segmentation (types of customers, loyalty)<\/li>\r\n<li>\u27A4 To merge close points on a map<\/li>\r\n<li>\u27A4 For image compression<\/li>\r\n<li>\u27A4 To analyze and label new data<\/li>\r\n<li>\u27A4 To detect abnormal behavior<\/li>\r\n\r\nPopular algorithms: <underline>K-means clustering<\/underline>, <underline>Mean-Shift<\/underline>, <underline>DBSCAN<\/underline>\r\n\r\nClustering is a classification with no predefined classes. It\u2019s like dividing socks by color when you don't remember all the colors you have. Clustering algorithm is trying to find similar (by some features) objects and merge them in a cluster. Those who have lots of similar features are joined in one class. With some algorithms, you even can specify the exact number of clusters you want.\r\n\r\nAn excellent example of clustering - markers on web maps. When you're looking for all vegan restaurants around, the clustering engine groups them to blobs with a number. Otherwise, your browser would freeze, trying to draw all three million vegan restaurants in that hipster downtown.\r\n\r\nApple Photos and Google Photos use more complex clustering. They're looking for faces in photos to create albums of your friends. The app doesn't know how many friends you have and how they look, but it's trying to find the common facial features. Typical clustering.\r\n\r\nAnother popular issue is image compression. When saving the image to PNG you can set the palette, let's say, to 32 colors. It means clustering will find all the \"reddish\" pixels, calculate the \"average red\" and set it for all the red pixels. Fewer colors - lower file size - profit!\r\n\r\nHowever, you may have problems with colors like Cyan-like colors. Is it green or blue? Here comes the <underline>K-Means<\/underline> algorithm.\r\n\r\nThis algorithm randomly sets 32 color dots in the palette. Now, those are centroids. The remaining points are marked as assigned to the nearest centroid. Thus, we get kind of galaxies around these 32 colors. Then we're moving the centroid to the center of its galaxy and repeat that until centroids stop moving.\r\n\r\nAll done. Clusters defined, stable, and there are exactly 32 of them. The above picture shows more real-world example.\r\n\r\nSearching for the centroids is convenient. Though, in real life clusters are not always circles. Let's imagine you're a geologist. And you need to find some similar minerals on the map. In that case, the clusters can be weirdly shaped and even nested. Also, you don't even know how many of them to expect. 10? 100?\r\n\r\nK-means does not fit here, but <underline>DBSCAN<\/underline> can be helpful. Let's say, our dots are people at the town square. Find any three people standing close to each other and ask them to hold hands. Then, tell them to start grabbing hands of those neighbors they can reach. And so on, and so on until no one else can take anyone's hand. That's our first cluster. Repeat the process until everyone is clustered. Done.\r\n\r\nJust like classification, clustering could be used to detect anomalies. User behaves abnormally after signing up? Let the machine ban him temporarily and create a ticket for the support to check it. Maybe it's a bot. We don't even need to know what \"normal behavior\" is, we just upload all user actions to our model and let the machine decide if it's a \"typical\" user or not.\r\n\r\nThis approach doesn't work that well compared to the classification one, but it never hurts to try."
  },
  {
    "title": "Unsupervised Learning | Generalization",
    "category": "Part 1",
    "description": "<em><subLabel>\u201DAssembles specific features into more high-level ones.\u201D<\/subLabel><\/em>\r\n\r\nNowadays is used for:\r\n<li>\u27A4 Recommender systems<\/li>\r\n<li>\u27A4 Beautiful visualizations<\/li>\r\n<li>\u27A4 Topic modeling and similar document search<\/li>\r\n<li>\u27A4 Fake image analysis<\/li>\r\n<li>\u27A4 Risk management<\/li>\r\n\r\nPopular algorithms: <underline>Principal Component Analysis<\/underline> (PCA), <underline>Singular Value Decomposition<\/underline> (SVD), <underline>Latent Dirichlet allocation<\/underline> (LDA), <underline>Latent Semantic Analysis<\/underline> (LSA, pLSA, GLSA), <underline>t-SNE<\/underline> (for visualization)\r\n\r\nPreviously these methods were used by hardcore data scientists, who had to find \"something interesting\" in huge piles of numbers. When Excel charts didn't help, they forced machines to do the pattern-finding. That's how they got Dimension Reduction or Feature Learning methods.\r\n\r\nIt is always more convenient for people to use abstractions, not a bunch of fragmented features. For example, we can merge all dogs with triangle ears, long noses, and big tails to a nice abstraction - \"shepherd\". Yes, we're losing some information about the specific shepherds, but the new abstraction is much more useful for naming and explaining purposes. As a bonus, such \"abstracted\" models learn faster, overfit less and use a lower number of features.\r\n\r\nThese algorithms became an amazing tool for Topic Modeling. We can abstract from specific words to their meanings. This is what <underline>Latent semantic analysis<\/underline> (LSA) does. It is based on how frequently you see the word on the exact topic. Like, there are more tech terms in tech articles, for sure. The names of politicians are mostly found in political news, etc.\r\n\r\nYes, we can just make clusters from all the words at the articles, but we will lose all the important connections (for example the same meaning of <em>battery<\/em> and <em>accumulator<\/em> in different documents). LSA will handle it properly, that's why its called \"latent semantic\".\r\n\r\nSo we need to connect the words and documents into one feature to keep these latent connections - it turns out that <underline>Singular decomposition <\/underline>(SVD) nails this task, revealing useful topic clusters from seen-together words.\r\n\r\nRecommender Systems and Collaborative Filtering is another super-popular use of the dimensionality reduction method. Seems like if you use it to abstract user ratings, you get a great system to recommend movies, music, games and whatever you want.\r\n\r\nIt's barely possible to fully understand this machine abstraction, but it's possible to see some correlations on a closer look. Some of them correlate with user's age - kids play Minecraft and watch cartoons more; others correlate with movie genre or user hobbies.\r\n\r\nMachines get these high-level concepts even without understanding them, based only on knowledge of user ratings. Nicely done, Mr.Computer. Now we can write a thesis on why bearded lumberjacks love My Little Pony."
  },
  {
    "title": "Unsupervised Learning | Association",
    "category": "Part 1",
    "description": "<em><subLabel>\u201DLook for patterns in the orders' stream.\u201D<\/subLabel><\/em>\r\n\r\n<subLabel>\uD83E\uDD2A + \u2615\uFE0F = \uD83D\uDC69\uD83C\uDFFC\u200D\uD83D\uDCBB <\/subLabel>\r\n<subLabel>\uD83E\uDD69 + \uD83E\uDD6F = \uD83C\uDF54<\/subLabel>\r\n<subLabel>\uD83D\uDCB5 + \uD83D\uDECD = \uD83D\uDE0D<\/subLabel>\r\n\r\nNowadays is used:\r\n<li>\u27A4 To forecast sales and discounts<\/li>\r\n<li>\u27A4 To analyze goods bought together<\/li>\r\n<li>\u27A4 To place the products on the shelves<\/li>\r\n<li>\u27A4 To analyze web surfing patterns<\/li>\r\n\r\nPopular algorithms: <underline>Apriori, Euclat, FP-growth<\/underline>\r\n\r\nThis includes all the methods to analyze shopping carts, automate marketing strategy, and other event-related tasks. When you have a sequence of something and want to find patterns in it - try these thingys.\r\n\r\nSay, a customer takes a six-pack of beers and goes to the checkout. Should we place peanuts on the way? How often do people buy them together? Yes, it probably works for beer and peanuts, but what other sequences can we predict? Can a small change in the arrangement of goods lead to a significant increase in profits?\r\n\r\nSame goes for e-commerce. The task is even more interesting there - what is the customer going to buy next time?\r\n\r\nNo idea why rule-learning seems to be the least elaborated upon category of machine learning. Classical methods are based on a head-on look through all the bought goods using trees or sets. Algorithms can only search for patterns, but cannot generalize or reproduce those on new examples.\r\n\r\nIn the real world, every big retailer builds their own proprietary solution, so nooo revolutions here for you. The highest level of tech here - recommender systems."
  },
  {
    "title": "Reinforcement Learning | Introduction",
    "category": "Part 2",
    "description": "<em><subLabel>\u201DThrow a robot into a maze and let it find an exit.\u201D<\/subLabel><\/em>\r\n\r\nNowadays used for:\r\n<li>\u27A4 Self-driving cars<\/li>\r\n<li>\u27A4 Robot vacuums<\/li>\r\n<li>\u27A4 Games<\/li>\r\n<li>\u27A4 Automating trading<\/li>\r\n<li>\u27A4 Enterprise resource management<\/li>\r\n\r\nPopular algorithms: <underline>Q-Learning<\/underline>, <underline>SARSA<\/underline>, DQN, <underline>A3C<\/underline>, <underline>Genetic algorithm<\/underline>\r\n\r\nFinally, we get to something that looks like <em>real artificial intelligence<\/em>. In lots of articles reinforcement learning is placed somewhere in between of supervised and unsupervised learning. They have nothing in common! Is this because of the name?\r\n\r\nReinforcement learning is used in cases when your problem is not related to data at all, but you have an environment to live in. Like a video game world or a city for self-driving car.\r\n\r\nKnowledge of all the road rules in the world will not teach the autopilot how to drive on the roads. Regardless of how much data we collect, we still can't foresee all the possible situations. This is why its goal is to <strong>minimize error, not to predict all the moves.<\/strong>\r\n\r\nSurviving in an environment is a core idea of reinforcement learning. Throw poor little robot into real life, punish it for errors and reward it for right deeds. Same way we teach our kids, right?\r\n\r\nMore effective way here - to build a virtual city and let self-driving car to learn all its tricks there first. That's exactly how we train auto-pilots right now. Create a virtual city based on a real map, populate with pedestrians and let the car learn to kill as few people as possible. When the robot is reasonably confident in this artificial GTA, it's freed to test in the real streets. Fun!\r\n\r\nThere may be two different approaches - <strong>Model-Based<\/strong> and <strong>Model-Free<\/strong>.\r\n\r\nModel-Based means that car needs to memorize a map or its parts. That's a pretty outdated approach since it's impossible for the poor self-driving car to memorize the whole planet.\r\n\r\nIn Model-Free learning, the car doesn't memorize every movement but tries to generalize situations and act rationally while obtaining a maximum reward."
  },
  {
    "title": "Reinforcement Learning | Algorithms",
    "category": "Part 2",
    "description": "<strong><subLabel>HOW MACHINES BEHAVE IN CASE OF FIRE<\/subLabel><\/strong>\r\n\r\n<subLabel><strong>CLASSICAL PROGRAMMING<\/strong>\r\n\u201CI counted all the scenarios,\t\r\nand now you have to\r\ntake off your underwear\r\nand make a rope of it.\u201D\r\n\r\n<strong>MACHINE LEARNING<\/strong>\r\n\u201CAccording to my statistics,\r\npeople die in 6% of fires.\r\nSo I recommend you die now.\u201D\r\n\r\n<strong>REINFORCEMENT LEARNING<\/strong>\r\n\u201CJust run for your\r\nfreaking lifeeeee\r\naaaaaaaaaa!!!!!\u201D<\/subLabel>\r\n\r\nRemember the news about AI beating a top player at the game of Go? Despite shortly before this it being proved that the number of combinations in this game is greater than the number of atoms in the universe.\r\n\r\nThis means the machine could not remember all the combinations and thereby win Go (as it did chess). At each turn, it simply chose the best move for each situation, and it did well enough to outplay a human meatbag.\r\n\r\nThis approach is a core concept behind <underline>Q-learning<\/underline> and its derivatives (SARSA & DQN). 'Q' in the name stands for \"Quality\" as a robot learns to perform the most \"qualitative\" action in each situation and all the situations are memorized as a simple <underline>markovian process<\/underline>.\r\n\r\nSuch a machine can test billions of situations in a virtual environment, remembering which solutions led to greater reward. But how can it distinguish previously seen situations from a completely new one? If a self-driving car is at a road crossing and the traffic light turns green - does it mean it can go now? What if there's an ambulance rushing through a street nearby?\r\n\r\nThe answer today is \"no one knows\". There's no easy answer. Researchers are constantly searching for it but meanwhile only finding workarounds. Some would hardcode all the situations manually that let them solve exceptional cases, like the <underline>trolley problem<\/underline>. Others would go deep and let neural networks do the job of figuring it out. This led us to the evolution of Q-learning called Deep Q-Network (DQN). But they are not a silver bullet either.\r\n\r\nReinforcement Learning for an average person would look like a <em>real artificial intelligence<\/em>. Because it makes you think <em>wow, this machine is making decisions in real life situations!<\/em> This topic is hyped right now, it's advancing with incredible pace and intersecting with a neural network to clean your floor more accurately. Amazing world of technologies!"
  },
  {
    "title": "Ensemble Methods | Introduction",
    "category": "Part 3",
    "description": "<em><subLabel>\u201DBunch of stupid trees learning to correct errors of each other.\u201D<\/subLabel><\/em>\r\n\r\nNowadays is used for:\r\n<li>\u27A4 Everything that fits classical algorithm approaches (but works better)<\/li>\r\n<li>\u27A4 Search systems<\/li>\r\n<li>\u27A4 Computer vision<\/li>\r\n<li>\u27A4 Object detection<\/li>\r\n\r\nPopular algorithms: <underline>Random Forest<\/underline>, <underline>Gradient Boosting<\/underline>\r\n\r\nIt's time for modern, grown-up methods. Ensembles and neural networks are two main fighters paving our path to a singularity. Today they are producing the most accurate results and are widely used in production.\r\n\r\nHowever, the neural networks got all the hype today, while the words like \"boosting\" or \"bagging\" are scarce hipsters on TechCrunch.\r\n\r\nDespite all the effectiveness the idea behind these is overly simple. If you take a bunch of inefficient algorithms and force them to correct each other's mistakes, the overall quality of a system will be higher than even the best individual algorithms.\r\n\r\nYou'll get even better results if you take the most unstable algorithms that are predicting completely different results on small noise in input data. Like Regression and Decision Trees. These algorithms are so sensitive to even a single outlier in input data to have models go mad.\r\n\r\nIn fact, this is what we need.\r\n\r\nWe can use any algorithm we know to create an ensemble. Just throw a bunch of classifiers, spice it up with regression and don't forget to measure accuracy. From my experience: don't even try a Bayes or kNN here. Although \"dumb\", they are really stable. That's boring and predictable. Like your ex.\r\n\r\nInstead, there are three battle-tested methods to create ensembles."
  },
  {
    "title": "Ensemble Methods | Stacking",
    "category": "Part 3",
    "description": "Stacking Output of several parallel models is passed as input to the last one which makes a final decision. Like that girl who asks her girlfriends whether to meet with you in order to make the final decision herself.\r\n\r\nEmphasis here on the word \"different\". Mixing the same algorithms on the same data would make no sense. The choice of algorithms is completely up to you. However, for final decision-making model, regression is usually a good choice.\r\n\r\nBased on my experience stacking is less popular in practice, because two other methods are giving better accuracy."
  },
  {
    "title": "Ensemble Methods | Bagging",
    "category": "Part 3",
    "description": "Bagging aka <underline>Bootstrap AGGregatING<\/underline>. Use the same algorithm but train it on different subsets of original data. In the end - just average answers.\r\n\r\nData in random subsets may repeat. For example, from a set like \"1-2-3\" we can get subsets like \"2-2-3\", \"1-2-2\", \"3-1-2\" and so on. We use these new datasets to teach the same algorithm several times and then predict the final answer via simple majority voting.\r\n\r\nThe most famous example of bagging is the <underline>Random Forest<\/underline> algorithm, which is simply bagging on the decision trees. When you open your phone's camera app and see it drawing boxes around people's faces - it's probably the results of Random Forest work. Neural networks would be too slow to run real-time yet bagging is ideal given it can calculate trees on all the shaders of a video card or on these new fancy ML processors.\r\n\r\nIn some tasks, the ability of the Random Forest to run in parallel is more important than a small loss in accuracy to the boosting, for example. Especially in real-time processing. There is always a trade-off."
  },
  {
    "title": "Ensemble Methods | Boosting",
    "category": "Part 3",
    "description": "Boosting Algorithms are trained one by one sequentially. Each subsequent one paying most of its attention to data points that were mispredicted by the previous one. Repeat until you are happy.\r\n\r\nSame as in bagging, we use subsets of our data but this time they are not randomly generated. Now, in each subsample we take a part of the data the previous algorithm failed to process. Thus, we make a new algorithm learn to fix the errors of the previous one.\r\n\r\nThe main advantage here - a very high, even illegal in some countries precision of classification that all cool kids can envy. The cons were already called out - it doesn't parallelize. But it's still faster than neural networks. It's like a race between a dump truck and a racecar. The truck can do more, but if you want to go fast - take a car.\r\n\r\nIf you want a real example of boosting - open Facebook or Google and start typing in a search query. Can you hear an army of trees roaring and smashing together to sort results by relevancy? That's because they are using boosting."
  },
  {
    "title": "Neural Networks | Introduction",
    "category": "Part 4",
    "description": "<em><subLabel>\u201DWe have a thousand-layer network, dozens of video cards, but still no idea where to use it. Let's generate cat pics!\u201D<\/subLabel><\/em>\r\n\r\nUsed today for:\r\n<li>\u27A4 Replacement of all algorithms above<\/li>\r\n<li>\u27A4 Object identification on photos and videos<\/li>\r\n<li>\u27A4 Speech recognition and synthesis<\/li>\r\n<li>\u27A4 Image processing, style transfer<\/li>\r\n<li>\u27A4 Machine translation<\/li>\r\n\r\nPopular architectures: <underline>Perceptron<\/underline>, <underline>Convolutional Network<\/underline> (CNN), <underline>Recurrent Networks<\/underline> (RNN), <underline>Autoencoders<\/underline>"
  },
  {
    "title": "Neural Networks | Algorithms",
    "category": "Part 4",
    "description": "If no one has ever tried to explain neural networks to you using \"human brain\" analogies, you're happy. Tell me your secret. But first, let me explain it the way I like.\r\n\r\nAny neural network is basically a collection of <strong>neurons<\/strong> and <strong>connections<\/strong> between them. <strong>Neuron<\/strong> is a function with a bunch of inputs and one output. Its task is to take all numbers from its input, perform a function on them and send the result to the output.\r\n\r\nHere is an example of a simple but useful in real life neuron: sum up all numbers from the inputs and if that sum is bigger than N - give 1 as a result. Otherwise - zero.\r\n\r\n<strong>Connections<\/strong> are like channels between neurons. They connect outputs of one neuron with the inputs of another so they can send digits to each other. Each connection has only one parameter - weight. It's like a connection strength for a signal. When the number 10 passes through a connection with a weight 0.5 it turns into 5.\r\n\r\nThese weights tell the neuron to respond more to one input and less to another. Weights are adjusted when training - that's how the network learns. Basically, that's all there is to it.\r\n\r\nTo prevent the network from falling into anarchy, the neurons are linked by layers, not randomly. Within a layer neurons are not connected, but they are connected to neurons of the next and previous layers. Data in the network goes strictly in one direction - from the inputs of the first layer to the outputs of the last.\r\n\r\nIf you throw in a sufficient number of layers and put the weights correctly, you will get the following: by applying to the input, say, the image of handwritten digit 4, black pixels activate the associated neurons, they activate the next layers, and so on and on, until it finally lights up the exit in charge of the four. The result is achieved.\r\n\r\nWhen doing real-life programming nobody is writing neurons and connections. Instead, everything is represented as matrices and calculated based on matrix multiplication for better performance. \r\n\r\nA well trained neural network can fake the work of any of the algorithms described previously (and frequently works more precisely). This universality is what made them widely popular. <em>Finally we have an architecture of human brain<\/em> they said <em>we just need to assemble lots of layers and teach them on any possible data<\/em> they hoped. Then the first <underline>AI winter<\/underline> started, then it thawed, and then another wave of disappointment hit.\r\n\r\nIt turned out networks with a large number of layers required computation power unimaginable at that time. Nowadays any gamer PC with geforces outperforms the datacenters of that time. So people didn't have any hope then to acquire computation power like that and neural networks were a huge bummer.\r\n\r\nAnd then ten years ago deep learning rose.\r\n\r\nIn 2012 convolutional neural networks acquired an overwhelming victory in ImageNet competition that made the world <em>suddenly remember<\/em> about methods of deep learning described in the ancient 90s. Now we have video cards!\r\n\r\nDifferences of deep learning from classical neural networks were in new methods of training that could handle bigger networks. Nowadays only theoretics would try to divide which learning to consider deep and not so deep.\r\n\r\nI'll tell about two main kinds nowadays."
  },
  {
    "title": "Convolutional Neural Networks (CNN)",
    "category": "Part 4",
    "description": "Convolutional Neural Networks are all the rage right now. They are used to search for objects on photos and in videos, face recognition, style transfer, generating and enhancing images, creating effects like slow-mo and improving image quality. Nowadays CNNs are used in all the cases that involve pictures and videos. Even in your iPhone several of these networks are going through your nudes to detect objects in those. If there <em>is something to detect<\/em>, heh.\r\n\r\nA problem with images was always the difficulty of extracting features out of them. You can split text by sentences, lookup words' attributes in specialized vocabularies, etc. But images had to be labeled manually to teach the machine where cat ears or tails were in this specific image. This approach got the name 'handcrafting features' and used to be used almost by everyone.\r\n\r\nThere are lots of issues with the handcrafting.\r\n\r\nFirst of all, if a cat had its ears down or turned away from the camera: you are in trouble, the neural network won't see a thing.\r\n\r\nSecondly, try naming on the spot 10 different features that distinguish cats from other animals. I for one couldn't do it, but when I see a black blob rushing past me at night - even if I only see it in the corner of my eye - I would definitely tell a cat from a rat. Because people don't look only at ear form or leg count and account lots of different features they don't even think about. And thus cannot explain it to the machine.\r\n\r\nSo it means the machine needs to learn such features on its own, building on top of basic lines. We'll do the following: first, we divide the whole image into 8x8 pixel blocks and assign to each a type of dominant line \u2013 either horizontal [-], vertical [|] or one of the diagonals [\/]. It can also be that several would be highly visible - this happens and we are not always absolutely confident.\r\n\r\nOutput would be several tables of sticks that are in fact the simplest features representing objects edges on the image. They are images on their own but built out of sticks. So we can once again take a block of 8x8 and see how they match together. And again and again\u2026\r\n\r\nThis operation is called convolution, which gave the name for the method. Convolution can be represented as a layer of a neural network, because each neuron can act as any function.\r\n\r\nWhen we feed our neural network with lots of photos of cats it automatically assigns bigger weights to those combinations of sticks it saw the most frequently. It doesn't care whether it was a straight line of a cat's back or a geometrically complicated object like a cat's face, something will be highly activating.\r\n\r\nAs the output, we would put a simple perceptron which will look at the most activated combinations and based on that differentiate cats from dogs.\r\n\r\nThe beauty of this idea is that we have a neural net that searches for the most distinctive features of the objects on its own. We don't need to pick them manually. We can feed it any amount of images of any object just by googling billions of images with it and our net will create feature maps from sticks and learn to differentiate any object on its own."
  },
  {
    "title": "Recurrent Neural Networks (RNN)",
    "category": "Part 4",
    "description": "The second most popular architecture today. Recurrent Neural Networks gave us useful things like neural machine translation, speech recognition and voice synthesis in smart assistants. RNNs are the best for sequential data like voice, text or music.\r\n\r\nRemember Microsoft Sam, the old-school speech synthesizer from Windows XP? That funny guy builds words letter by letter, trying to glue them up together. Now, look at Amazon Alexa or Assistant from Google. They don't only say the words clearly, they even place the right accents!\r\n\r\nAll because modern voice assistants are trained to speak not letter by letter, but on whole phrases at once. We can take a bunch of voiced texts and train a neural network to generate an audio-sequence closest to the original speech.\r\n\r\nIn other words, we use text as input and its audio as the desired output. We ask a neural network to generate some audio for the given text, then compare it with the original, correct errors and try to get as close as possible to ideal.\r\n\r\nSounds like a classical learning process. Even a <underline>perceptron<\/underline> is suitable for this. But how should we define its outputs? Firing one particular output for each possible phrase is not an option - obviously.\r\n\r\nHere we'll be helped by the fact that text, speech or music are sequences. They consist of consecutive units like syllables. They all sound unique but depend on previous ones. Lose this connection and you get dubstep.\r\n\r\nWe can train the perceptron to generate these unique sounds, but how will it remember previous answers? So the idea is to add memory to each neuron and use it as an additional input on the next run. A neuron could make a note for itself - hey, we had a vowel here, the next sound should sound higher (it's a very simplified example).\r\n\r\nThat's how recurrent networks appeared.\r\n\r\nThis approach had one huge problem - when all neurons remembered their past results, the number of connections in the network became so huge that it was technically impossible to adjust all the weights.\r\n\r\nWhen a neural network can't forget, it can't learn new things (people have the same flaw).\r\n\r\nThe first decision was simple: limit the neuron memory. Let's say, to memorize no more than 5 recent results. But it broke the whole idea.\r\n\r\nA much better approach came later: to use special cells, similar to computer memory. Each cell can record a number, read it or reset it. They were called long and short-term memory (LSTM) cells.\r\n\r\nNow, when a neuron needs to set a reminder, it puts a flag in that cell. Like \"it was a consonant in a word, next time use different pronunciation rules\". When the flag is no longer needed, the cells are reset, leaving only the \u201Clong-term\u201D connections of the classical perceptron. In other words, the network is trained not only to learn weights but also to set these reminders.\r\n\r\nSimple, but it works!"
  },
  {
    "title": "When the war with the machines?",
    "category": "Basics",
    "description": "The main problem here is that the question <em>\u201Dwhen will the machines become smarter than us and enslave everyone?\u201D<\/em> is initially wrong. There are too many hidden conditions in it.\r\n\r\nWe say \"become smarter than us\" like we mean that <strong>there is a certain unified scale of intelligence<\/strong>. The top of which is a human, dogs are a bit lower, and stupid pigeons are hanging around at the very bottom.\r\n\r\nThat's wrong.\r\n\r\nIf this were the case, every human must beat animals in everything but it's not true. The average squirrel can remember a thousand hidden places with nuts - I can't even remember where are my keys.\r\n\r\nSo intelligence is a set of different skills, not a single measurable value? Or is remembering nuts stashed locations not included in intelligence?\r\n\r\nAn even more interesting question for me - <strong>why do we believe that the human brain possibilities are limited?<\/strong> There are many popular graphs on the Internet, where the technological progress is drawn as an exponent and the human possibilities are constant. But is it?\r\n\r\nOk, multiply 1680 by 950 right now in your mind. I know you won't even try, lazy bastards. But give you a calculator - you'll do it in two seconds. Does this mean that the calculator just expanded the capabilities of your brain?\r\n\r\nIf yes, can I continue to expand them with other machines? Like, use notes in my phone to not to remember a shitload of data? Oh, seems like I'm doing it right now. I'm expanding the capabilities of my brain with the machines.\r\n\r\nThink about it. \r\nThanks for reading."
  }
]
